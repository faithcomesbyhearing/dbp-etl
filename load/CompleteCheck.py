# CompleteCheck.py

# This program performs completeness checks of the DBP database.

# Before running this program, one must a current copy of dbp-prod.txt, and dbp-vid.txt
# These are generated by DownloadBucketList.py

import io
from Config import *
from SQLUtility import *
from LPTSExtractReader import *


class CompleteCheck:


	def __init__(self, config, db, lptsReader):
		self.config = config
		self.db = db
		self.lptsReader = lptsReader


	# Check for each file in bible_files to insure that it exists in the DBP
	def bibleFilesToS3(self):
		files = set()
		missingFilesetIds = set()
		dbProd = io.open(self.config.directory_bucket_list + "dbp-prod.txt", mode="r", encoding="utf-8")
		for line in dbProd:
			if "delete" not in line:
				files.add(line.split("\t")[0])
		dbProd.close()
		print(len(files), "dbp-prod records")
		dbVid = io.open(self.config.directory_bucket_list + "dbp-vid.txt", mode="r", encoding="utf-8")
		for line in dbVid:
			files.add(line.split("\t")[0])
		dbVid.close()
		print(len(files), "dbp-prod + dbp-vid records")
		sql = ("SELECT f.set_type_code, c.bible_id, f.id, bf.file_name"
			" FROM bible_filesets f, bible_files bf, bible_fileset_connections c"
			" WHERE f.hash_id = bf.hash_id AND f.hash_id = c.hash_id"
			" ORDER BY f.id, c.bible_id")
		resultSet = self.db.select(sql, ())
		for (typeCode, bibleId, filesetId, filename) in resultSet:
			if len(filesetId) < 10 or filesetId[-2:] != "SA":
				#print(typeCode, bibleId, filesetId, filename)
				fullKey = "%s/%s/%s/%s" % (typeCode.split("_")[0], bibleId, filesetId, filename)
				if fullKey not in files:
					print("%s NOT in s3 bucket" % (fullKey))
					missingFilesetIds.add(filesetId)
		for filesetId in sorted(missingFilesetIds):
			print("%s Has some or all filese missing from s3 bucket" % (filesetId))


	# Check each DamId in LPTS to see if it has been loaded into DBP
	def bibleFilesetsToLPTS(self):
		filesetIds = self.db.selectSet("SELECT id FROM bible_filesets", ())
		for rec in self.lptsReader.resultSet:
			for typeCode in ["audio", "text", "video"]:
				apiPermiss = None
				appPermiss = None
				webPermiss = None
				indexes = [1, 2, 3]
				if typeCode == "audio":
					apiPermiss = rec.APIDevAudio()
					appPermiss = rec.DBPMobile()
					webPermiss = rec.DBPWebHub()
				if typeCode == "text":
					apiPermiss = rec.APIDevText()
					appPermiss = rec.MobileText()
					webPermiss = rec.HubText()
				if typeCode == "video":
					apiPermiss = rec.APIDevVideo()
					appPermiss = rec.MobileVideo()
					webPermiss = rec.WebHubVideo()
					indexes = [1]
				if apiPermiss == "-1" or appPermiss == "-1" or webPermiss == "-1":
					for index in indexes:
						damIdMap = rec.DamIdMap(typeCode, index)
						for (damId, status) in damIdMap.items():
							if status in {"Live", "live"}:
								if damId not in filesetIds:
									print(rec.Reg_StockNumber(), typeCode, index, damId, "has no bible_filesets record.")



if (__name__ == '__main__'):
	config = Config()
	db = SQLUtility(config)
	lptsReader = LPTSExtractReader(config)
	check = CompleteCheck(config, db, lptsReader)
	#check.bibleFilesToS3()
	check.bibleFilesetsToLPTS()